#!/usr/bin/env bash

set -euo pipefail

# TGI dev box CLI Tool

# Configuration
CONFIG_FILE="./config.ini"
KEY_PATH="$HOME/.ssh/my_tgi_key.pem"
TAG_NAME="david-holtz-quick-nixos"
HF_TOKEN="YOUR_HF_TOKEN"
MODEL_NAME="meta-llama/Llama-3.1-8B-Instruct"
INSTANCE_TYPE="g6.48xlarge"
VOLUME_SIZE=512
IMAGE_ID="ami-0b3d51a362efa9e02"
REGION="us-east-1"
SUBNET_ID="YOUR_SUBNET_ID"
SECURITY_GROUP_ID="YOUR_SECURITY_GROUP_ID"
CACHIX_CACHE="text-generation-inference"

# get key name from KEY_PATH
KEY_NAME=$(basename "$KEY_PATH" .pem)

# Load configuration
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    else
        echo "‚ùå Configuration file not found. Creating a new one..."
        create_config
        source "$CONFIG_FILE"
    fi

    KEY_NAME=$(basename "$KEY_PATH" .pem)
}

# Create example configuration file
create_config() {
    cat <<EOF >"$CONFIG_FILE"
KEY_PATH="$HOME/.ssh/my_tgi_key.pem"
TAG_NAME="YOUR_TAG_NAME"
HF_TOKEN=""
MODEL_NAME="meta-llama/Llama-3.1-8B-Instruct"
INSTANCE_TYPE="g6.48xlarge"
VOLUME_SIZE=512
IMAGE_ID="ami-0b3d51a362efa9e02"
REGION="us-east-1"
SUBNET_ID="YOUR_SUBNET_ID"
SECURITY_GROUP="YOUR_SECURITY_GROUP_ID"
EOF
    echo "‚úÖ Configuration file created at $CONFIG_FILE"
}


# Check that tag name is not default value
check_tag_name() {
    if [[ "$TAG_NAME" == "YOUR_TAG_NAME" ]]; then
        echo "‚ùå TAG_NAME is not set. Please set it in the configuration file and try again."
        exit 1
    fi
}


# Check dependencies
check_dependencies() {
    local deps=("aws" "ssh" "scp" "sed" "grep")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            echo "‚ùå $dep is not installed. Please install it and try again."
            exit 1
        fi
    done
}

# Check AWS CLI configuration
check_aws_config() {
    if ! aws configure list &>/dev/null; then
        echo "‚ùå AWS CLI is not configured. Please run 'aws configure' to set it up."
        exit 1
    fi
}

# Check AWS SSO login
check_aws_sso() {
    if ! aws sts get-caller-identity &>/dev/null; then
        echo "‚ùå AWS SSO login required. Please run 'aws sso login' and try again."
        exit 1
    fi
}

# Generate NixOS configuration
generate_nixos_config() {
    cat <<EOF >/tmp/insta.nix
{ config, modulesPath, pkgs, lib, ... }: {
  imports = [
    "\${modulesPath}/virtualisation/amazon-image.nix"
    (builtins.fetchTarball {
        url = "https://github.com/msteen/nixos-vscode-server/archive/8b6db451de46ecf9b4ab3d01ef76e59957ff549f.tar.gz";
        sha256 = "09j4kvsxw1d5dvnhbsgih0icbrxqv90nzf0b589rb5z6gnzwjnqf";
    })
  ];
  system.stateVersion = "24.05";
  services.vscode-server.enable = true;

  # Enable CUDA
  nixpkgs.config.allowUnfree = true;
  nixpkgs.config.cudaSupport = true;

  environment.systemPackages = with pkgs; [
    git
    gh
    zsh
    oh-my-zsh
    byobu
    tmux
    cachix
    cudaPackages.cudatoolkit
    nodejs
    vscode
    pre-commit
    ruff
    cron
  ];

  # Enable NVIDIA graphics
  hardware.nvidia = {
    modesetting.enable = true;
    open = false;
  };
  hardware.graphics = {
    enable = true;
    enable32Bit = true;
  };
  services.xserver.videoDrivers = [ "nvidia" ];

  # Set up Zsh as the default shell system-wide
  users.defaultUserShell = pkgs.zsh;

  # Configure Zsh and Oh My Zsh
  programs.zsh = {
    enable = true;
    ohMyZsh = {
      enable = true;
      theme = "robbyrussell";
      plugins = [ "git" "docker" "npm" ];
    };
    shellAliases = {
      update = "sudo nixos-rebuild switch";
      example = "echo 'yo'";
      gpu_usage = "nvidia-smi --query-gpu=memory.total,memory.used --format=csv,noheader,nounits";
      gpu_usage_percent = "gpu_usage | awk -F, '{total+=\$1; used+=\$2} END {printf (used/total)*100}'";
      gpu_usage_below_threshold = "gpu_usage_percent | xargs -I {} echo {}\"<5\" | bc";
    };
  };

  # Configure Byobu to allow mouse scrolling (improve this when updating users)
  system.activationScripts.writeByobuConfig = {
    text = ''
      mkdir -p /root/.byobu
      echo 'set -g mouse on' > /root/.byobu/.tmux.conf
      chmod 0644 /root/.byobu/.tmux.conf
    '';
  };

  services.cron = {
    enable = true;
    systemCronJobs = [
      "0 * * * *      root    /run/current-system/sw/bin/bash -c 'uptime' >> /tmp/whoami.log"
    ];
  };

  # Enable nix-command and flakes features
  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  # Add Cachix cache
  nix.settings = {
    substituters = [
      "https://cache.nixos.org"
      "https://${CACHIX_CACHE}.cachix.org"
    ];
    trusted-public-keys = [
      "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
      "${CACHIX_CACHE}.cachix.org-1:xdQ8eIf9LuIwS0n0/5ZmOHLaCXC6yy7MgzQNK/y+R1c="
    ];
  };
}
EOF
    echo "‚úÖ NixOS configuration generated at /tmp/insta.nix"
}

# Get instance private IP
get_private_ip() {
    local instance_id
    instance_id=$(aws ec2 describe-instances \
        --region "$REGION" \
        --filters "Name=tag:Name,Values=$TAG_NAME" "Name=instance-state-name,Values=running" \
        --query 'Reservations[0].Instances[0].InstanceId' \
        --output text)

    if [[ "$instance_id" == "None" ]]; then
        echo "‚ùå Instance not found. Exiting"
        exit 1
    fi

    aws ec2 describe-instances \
        --region "$REGION" \
        --instance-ids "$instance_id" \
        --query 'Reservations[0].Instances[0].PrivateIpAddress' \
        --output text
}

# SSH command wrapper
ssh_command() {
    local private_ip=$1
    shift
    ssh -o "StrictHostKeyChecking no" -i "$KEY_PATH" -t "root@$private_ip" "$@"
}

# SCP command wrapper
scp_command() {
    local private_ip=$1
    local src=$2
    local dest=$3
    scp -o "StrictHostKeyChecking no" -i "$KEY_PATH" "$src" "root@$private_ip:$dest"
}

# Create and setup a new devbox
up() {
    echo "üëç Creating and setting up a new devbox..."
    local start_time
    start_time=$(date +%s)

    generate_nixos_config

    if [[ ! -f "$KEY_PATH" ]]; then
        echo "‚ùå Key does not exist. Please create the key and try again"
        exit 1
    fi

    local instance_id
    instance_id=$(aws ec2 run-instances \
        --region "$REGION" \
        --instance-type "$INSTANCE_TYPE" \
        --image-id "$IMAGE_ID" \
        --key-name "$KEY_NAME" \
        --subnet-id "$SUBNET_ID" \
        --security-group-ids "$SECURITY_GROUP_ID" \
        --block-device-mappings "[{\"DeviceName\":\"/dev/xvda\",\"Ebs\":{\"VolumeSize\":$VOLUME_SIZE}}]" \
        --count 1 \
        --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$TAG_NAME}]" \
        --query 'Instances[0].InstanceId' \
        --output text)

    echo "‚úÖ 1. Instance ID: $instance_id"

    aws ec2 wait instance-running --region "$REGION" --instance-ids "$instance_id"
    echo "‚úÖ 2. Instance is running"

    local private_ip
    private_ip=$(get_private_ip)
    echo "‚úÖ 3. Private IP: $private_ip"

    until ssh_command "$private_ip" "uptime"; do
        sleep 5
    done
    echo "‚úÖ 4. Machine is accessible"

    scp_command "$private_ip" "/tmp/insta.nix" "/etc/nixos/configuration.nix"
    echo "‚úÖ 5. Configuration file copied"

    ssh_command "$private_ip" "nix-channel --add https://nixos.org/channels/nixos-unstable-small nixos && nix-channel --update"
    echo "‚úÖ 6. Nix channel set to unstable"

    ssh_command "$private_ip" "nixos-rebuild switch"
    echo "‚úÖ 7. NixOS rebuild switch command run"

    ssh_command "$private_ip" "systemctl --user enable auto-fix-vscode-server.service && ln -sfT /run/current-system/etc/systemd/user/auto-fix-vscode-server.service ~/.config/systemd/user/auto-fix-vscode-server.service"
    echo "‚úÖ 8. Enabled and linked auto-fix-vscode-server.service"

    ssh_command "$private_ip" "reboot"
    echo "‚úÖ 9. Machine rebooting to enable CUDA drivers and VSCode service"

    until ssh_command "$private_ip" "uptime"; do
        sleep 5
    done
    echo "‚úÖ 10. Machine is back up"

    ssh_command "$private_ip" "nvidia-smi && git clone https://github.com/huggingface/text-generation-inference.git"
    echo "‚úÖ 11. Cloned the repo"

    ssh_command "$private_ip" "cd text-generation-inference && nix develop .#impure --command bash -c 'cd server && make gen-server'"
    echo "‚úÖ 12. Server files prepared for development"

    ssh_command "$private_ip" "export HF_TOKEN=$HF_TOKEN && cd text-generation-inference && nix develop .#impure --command text-generation-server download-weights $MODEL_NAME"
    echo "‚úÖ 13. Weights downloaded"

    if ! grep -q "$TAG_NAME" "$HOME/.ssh/config"; then
        {
            echo ""
            echo "Host $TAG_NAME"
            echo "  HostName $private_ip"
            echo "  User root"
            echo "  IdentityFile $KEY_PATH"
        } >>"$HOME/.ssh/config"
        echo "‚úÖ 14. Added to ~/.ssh/config"
    else
        echo "‚úÖ 14. Already in ~/.ssh/config"
        local current_private_ip
        current_private_ip=$(grep -A 3 "$TAG_NAME" "$HOME/.ssh/config" | grep HostName | awk '{print $2}')
        if [[ "$current_private_ip" != "$private_ip" ]]; then
            echo "‚ùå Private IP is different. Updating ~/.ssh/config"
            sed -i '' "s/$current_private_ip/$private_ip/g" "$HOME/.ssh/config"
        else
            echo "‚úÖ 14. Private IP is the same"
        fi
    fi

    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))
    echo "‚úÖ 15. Setup time: $duration seconds."
}

# Add the devbox to local SSH config
add_to_local() {
    echo "üëç Adding devbox to local SSH config..."
    local start_time
    start_time=$(date +%s)

    local private_ip
    private_ip=$(get_private_ip)
    echo "‚úÖ Private IP: $private_ip"

    if ! grep -q "$TAG_NAME" "$HOME/.ssh/config"; then
        {
            echo ""
            echo "Host $TAG_NAME"
            echo "  HostName $private_ip"
            echo "  User root"
            echo "  IdentityFile $KEY_PATH"
        } >>"$HOME/.ssh/config"
        echo "‚úÖ Added to ~/.ssh/config"
    else
        echo "‚úÖ Already in ~/.ssh/config"
        local current_private_ip
        current_private_ip=$(grep -A 3 "$TAG_NAME" "$HOME/.ssh/config" | grep HostName | awk '{print $2}')
        if [[ "$current_private_ip" != "$private_ip" ]]; then
            echo "‚ùå Private IP is different. Updating ~/.ssh/config"
            sed -i '' "s/$current_private_ip/$private_ip/g" "$HOME/.ssh/config"
        else
            echo "‚úÖ Private IP is the same"
        fi
    fi

    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))
    echo "‚úÖ Script duration: $duration seconds"
}

# Open a byobu session with three panes
open_session() {
    echo "üëç Opening a three-pane byobu session..."
    local start_time
    start_time=$(date +%s)

    local private_ip
    private_ip=$(get_private_ip)
    echo "‚úÖ Private IP: $private_ip"

    ssh_command "$private_ip" "cd text-generation-inference && nix develop .#impure --command ls && byobu new-session -d -s mysession && byobu split-window -v && byobu split-window -v && byobu select-layout even-vertical && byobu send-keys -t 0 'nix develop .#impure' C-m && byobu send-keys -t 1 'nix develop .#impure' C-m && byobu send-keys -t 2 'nix develop .#impure' C-m && byobu attach-session -t mysession"

    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))
    echo "‚úÖ Script duration: $duration seconds"
}

# Shutdown the devbox
down() {
    echo "üëç Shutting down the devbox..."
    local start_time
    start_time=$(date +%s)

    local instance_id
    instance_id=$(aws ec2 describe-instances \
        --region "$REGION" \
        --filters "Name=tag:Name,Values=$TAG_NAME" "Name=instance-state-name,Values=running" \
        --query 'Reservations[0].Instances[0].InstanceId' \
        --output text \
        --no-cli-pager)

    echo "‚úÖ Instance ID: $instance_id"

    if [[ "$instance_id" == "None" ]]; then
        echo "‚ùå Instance was not created. Exiting"
        exit 1
    fi

    aws ec2 terminate-instances \
        --region "$REGION" \
        --instance-ids "$instance_id" \
        --no-cli-pager \
        --no-verify-ssl > /dev/null 2>&1  

    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))
    echo "‚úÖ Script duration: $duration seconds"
}

# Display usage information
usage() {
    cat <<EOF
Usage: $0 <command> [options]
Commands:
  status          Get the status of the devbox
  up              Create and setup a new devbox
  open            Open a byobu session with three panes
  ssh             SSH into the devbox
  down            Shutdown the devbox
  help            Display this help message
EOF
}

# Main script logic
main() {
    echo "üöÄ TGI Devbox CLI Tool"
    
    load_config
    check_tag_name
    check_dependencies
    check_aws_config
    check_aws_sso

    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi

    case "$1" in
    status)
        # TODO: improve how the output is displayed
        devbox_ip=$(get_private_ip)
        # show a green emoji if the devbox is up and a red one if it's down
        if [[ -z "$devbox_ip" ]]; then
            echo "üî¥ Devbox is down. Get started with \`./tginow up\`"
        else
            echo "üü¢ Devbox is up at $devbox_ip"
        fi
        ;;
    up)
        up
        ;;
    open)
        open_session
        ;;
    ssh)
        ssh_command "$(get_private_ip)"
        ;;
    down)
        down
        ;;
    help)
        usage
        ;;
    *)
        echo "Error: Unknown command '$1'"
        usage
        exit 1
        ;;
    esac
}

main "$@"
